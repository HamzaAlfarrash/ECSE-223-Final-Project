class Participant {

  status {
    NotAssignedParticipant {
      assign(Tour tour) / {
        doAssign(tour);
      } -> AssignedParticipant;
      cancel() -> CanceledParticipant;
    }

    AssignedParticipant {
      pay(String authorizationCode) [isValid(authorizationCode)] / {
        doPay(authorizationCode); 
      } -> PaidParticipant;
      pay(String authorizationCode) [!isValid(authorizationCode)] / {
        rejectPay(authorizationCode); 
      } -> AssignedParticipant;
      assign(Tour tour) / {
        rejectAssign(tour);
      } -> AssignedParticipant;
      startTrip(int week) -> CanceledParticipant;
      cancel() -> CanceledParticipant;
    }

    PaidParticipant {
      startTrip(int week) [hasMatchingStartWeek(week)] -> StartedParticipant;
      cancel() / { doRefund(50); } -> CanceledParticipant;
    }
    StartedParticipant {
      finishTrip() -> FinishedParticipant;
      cancel() / { doRefund(10); } -> CanceledParticipant;
    }
    CanceledParticipant {}
    FinishedParticipant {}
  }

  private void doAssign(Tour tour) {
    setTour(tour);
  }

  private void rejectAssign(Tour tour) {
      throw new RuntimeException("Assigning participant failed");
  }

  private boolean isValid(String authorizationCode) {
    if(authorizationCode.equals("") ||  authorizationCode == null) return false;
    return true;
  }
 

  private void doPay(String authorizationCode) {
    setStatus(Status.PaidParticipant);
      setAuthorizationCode(authorizationCode);
  }

    private void rejectPay(String authorizationCode) {
      throw new RuntimeException("Payement failed");
  }

  private boolean hasMatchingStartWeek(int week) {
    return (week >= getWeekAvailableFrom() && week <= getWeekAvailableUntil());
  }

  private void doRefund(int refundedPercentageAmount) {
    setRefundedPercentageAmount(refundedPercentageAmount);
  }

  private void rejectRefund(int refundedPercentageAmount) {
      throw new RuntimeException("Refund failed");
  }

}