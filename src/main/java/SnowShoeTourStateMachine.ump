class Participant {

  status {
    NotAssignedParticipant {
      assign(Tour tour) / {
        doAssign(tour);
      } -> AssignedParticipant;
      cancel() -> Canceled;
    }
    AssignedParticipant {
      pay(String authorizationCode) [isValid(authorizationCode)] / {
        doPay(authorizationCode); 
      } -> Paid;

      cancel() -> Canceled;
    }
    Paid {
      startTrip(int week) [hasMatchingStartWeek(week)] -> Started;
      cancel() / { doRefund(50); } -> Canceled;
    }
    Started {
      finishTrip() -> Finished;
      cancel() / { doRefund(10); } -> Canceled;
    }
    Canceled {}
    Finished {
    	cancel() / { doRefund(0); } -> Canceled;
    }
  }

  private void doAssign(Tour tour) {
    setTour(tour);
  }
  
  private void rejectAssign(Tour tour) {
  	throw new RuntimeException("Assigning participant failed");
  }

  private boolean isValid(String authorizationCode) {
    if(authorizationCode.equals("") ||  authorizationCode == null) return false;
    return true;
  }
 

  private void doPay(String authorizationCode) {
    setStatus(Status.Paid);
  	setAuthorizationCode(authorizationCode);
  }
  
    private void rejectPay(String authorizationCode) {
  	throw new RuntimeException("Payement failed");
  }

  private boolean hasMatchingStartWeek(int week) {
    return (week >= getWeekAvailableFrom() && week <= getWeekAvailableUntil());
  }

  private void doRefund(int refundedPercentageAmount) {
    setRefundedPercentageAmount(refundedPercentageAmount);
  }
  
  private void rejectRefund(int refundedPercentageAmount) {
  	throw new RuntimeException("Refund failed");
  }

}