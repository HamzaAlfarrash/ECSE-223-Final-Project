class Participant {

  status {
    NotAssigned {
      assign(Tour tour) / {
        doAssign(tour);
      } -> Assigned;
      cancel() -> Cancelled;
    }

    Assigned {
      pay(String authorizationCode) [isValid(authorizationCode)] / {
        doPay(authorizationCode); 
      } -> Paid;
      pay(String authorizationCode) [!isValid(authorizationCode)] / {
        rejectPay(authorizationCode); 
      } -> Assigned;
      assign(Tour tour) / {
        rejectAssign(tour);
      } -> Assigned;
      startTrip(int week) -> Started;
      cancel() -> Cancelled;
      finishTrip() -> Finished;
    }

    Paid {
      startTrip(int week) [hasMatchingStartWeek(week)] -> Started;
      cancel() / { doRefund(50); } -> Cancelled;
    }
    Started {
       startTrip(int week) [hasPaid == false] -> Cancelled;
      startTrip(int week) [hasPaid == true ] -> Started;
      finishTrip() -> Finished;
      cancel() / { doRefund(10); } -> Cancelled;
    }
    Cancelled {}
    Finished{}
  }

  Boolean hasPaid = false; 
  private void doAssign(Tour tour) {
    setTour(tour);
  }

  private void rejectAssign(Tour tour) {
      throw new RuntimeException("Assigning participant failed");
  }

  private boolean isValid(String authorizationCode) {
    if(authorizationCode.equals("") ||  authorizationCode == null) return false;
    return true;
  }
 

  private void doPay(String authorizationCode) {
    setStatus(Status.Paid);
      setAuthorizationCode(authorizationCode);
    hasPaid = true;
  }

    private void rejectPay(String authorizationCode) {
      throw new RuntimeException("Payement failed");
  }

  private boolean hasMatchingStartWeek(int week) {
    return (week >= getWeekAvailableFrom() && week <= getWeekAvailableUntil());
  }

  private void doRefund(int refundedPercentageAmount) {
    setRefundedPercentageAmount(refundedPercentageAmount);
  }

  private void rejectRefund(int refundedPercentageAmount) {
      throw new RuntimeException("Refund failed");
  }

}