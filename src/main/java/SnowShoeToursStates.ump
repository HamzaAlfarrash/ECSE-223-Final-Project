
class Participant {

  status {
    NotAssignedParticipant {
      assign(Tour tour) / {
        doAssign(tour);
      } -> AssignedParticipant;
      cancel() -> CanceledParticipant;
    }
    AssignedParticipant {
      pay(String authorizationCode) [isValid(authorizationCode)] / {
        doPay(authorizationCode); 
      } -> PaidParticipant;

      cancel() -> CanceledParticipant;
    }
    PaidParticipant {
      startTrip(int week) [hasMatchingStartWeek(week)] -> StartedParticipant;
      cancel() / { doRefund(50); } -> CanceledParticipant;
    }
    StartedParticipant {
      finishTrip() -> FinishedParticipant;
      cancel() / { doRefund(10); } -> CanceledParticipant;
    }
    CanceledParticipant {}
    FinishedParticipant {
    	cancel() / { doRefund(0); } -> CanceledParticipant;
    }
  }

  private void doAssign(Tour tour) {
    setTour(tour);
  }

  private boolean isValid(String authorizationCode) {
    if(authorizationCode.equals("") ||  authorizationCode == null) return false;
    return true;
  }
 

  private void doPay(String authorizationCode) {
    
  }

  private boolean hasMatchingStartWeek(int week) {
    
  }

  private void doRefund(int refundedPercentageAmount) {
    setRefundedPercentageAmount(refundedPercentageAmount);
  }

}